                                                                             PROJECT0:  RESTAURANTS

---------------------------------------------------------------------------------------------------------------------------

Structure of 'restaurants' collection:

{
  "address": {
     "building": "1007",
     "coord": [ -73.856077, 40.848447 ],
     "street": "Morris Park Ave",
     "zipcode": "10462"
  },
  "borough": "Bronx",
  "cuisine": "Bakery",
  "grades": [
     { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },
     { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },
     { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },
     { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },
     { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
  ],
  "name": "Morris Park Bake Shop",
  "restaurant_id": "30075445"
}

-----------------------------------------------------------------------------------------------------------

To connect mongoDB in shell-->

"C:\Program Files\MongoDB\Server\5.0\bin\mongod" --dbpath="C:\data\db"

open another shell and -->

C:\data\db>cd /

C:\>cd Program Files

C:\Program Files>cd MongoDB

C:\Program Files\MongoDB>cd Server

C:\Program Files\MongoDB\Server>cd Server
The system cannot find the path specified.

C:\Program Files\MongoDB\Server>cd 5.0

C:\Program Files\MongoDB\Server\5.0>cd bin

C:\Program Files\MongoDB\Server\5.0\bin>mongo.exe

-------------------------------------------------------------------------------------------------------------------------------

importing data into mongoDB:

"C:\Program Files\MongoDB\mongodbimport\bin\mongoimport" --db restaurants --collection restaurants --type json --file restaurants.json

-----------------------------------------------------------------------------------------------------------------------------------
To connect to mongoDB from python

pip install pymongo

from pymongo import MongoClient
import re
import datetime
import pprint
client=MongoClient()
db=client.restaurants
x=db.list_collection_names()
for i in range(len(x)):
    c=x[i]
    d=db.get_collection(c)

----------------------------------------------------------------------------------------------------------------------------

Following are the queries and followed by pymongo codes-->

1.Write a MongoDB query to display all the documents in the collection restaurants.

db.restaurants.find()

for e in d.find():
          print(e)

==================================================

2.Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection 
restaurant.

db.restaurants.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

for e in d.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}):
           print(e)

=====================================================

3.Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the
 documents in the collection restaurant.

db.restaurants.find({},{"_id":0,"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

for e in d.find({},{'_id':0,"restaurant_id":1,"name":1,"borough":1,"cuisine":1}):
           print(e)

==============================================================

4.Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the
 documents in the collection restaurant.

db.restaurants.find({},{"_id":0,"restaurant_id":1, "name":1, 'borough':1 ,'address':{'zipcode':1}})

for e in d.find({},{'_id':0,"restaurant_id":1,"name":1,"borough":1,"cuisine":1,'address':{'zipcode':True}}):
           print(e)

====================================================================

5.Write a MongoDB query to display all the restaurant which is in the borough Bronx.

db.restaurants.find({'borough':'Bronx'}).pretty();

for e in d.find({"borough":'Bronx'}):
          print(e)

==========================================================================

6.Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.

db.restaurants.find({'borough':'Bronx'}).limit(5)

for e in d.find({"borough":'Bronx'}).limit(5):
           print(e)

===============================================================================

7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.

db.restaurants.find({'borough':'Bronx' }).skip(5).limit(5)

for e in d.find({"borough":'Bronx'}).skip(5).limit(5):
           print(e)

======================================================================

8.Write a MongoDB query to find the restaurants who achieved a score more than 90.

db.restaurants.aggregate([{ $match:{"grades.score":{$gt : 90}}}]).pretty();

 for e in d.find({'grades' : {'$elemMatch' : {"score" : {'$gt' : 90}}}}): 
           print(e)

======================================================================

9.Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.

db.restaurants.aggregate([{ $match : {"grades.score" : {$gt : 80 , $lt :100}}}]).pretty()

for e in d.aggregate([{ "$match" : {"grades.score" : {"$gt" : 80 , "$lt" :100}}}]): 
           print(e)

==========================================================================
10.Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.Go to the editor

db.restaurants.find({"address.coord.0" : {$lt : -95.754168}});

for e in d.aggregate([{"$match" :{"address.coord.0" : {"$lt" : -95.754168}}}]): 
           print(e)

=========================================================================

11.Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 
70 and latitude less than -65.754168.

db.restaurants.find(
...                {$and:
...                     [
...                        {"cuisine" : {$ne :"American "}},
...                        {"grades.score" : {$gt : 70}},
...                        {"address.coord.0" : {$lt : -65.754168}}
...                     ]
...                 }
...                     );


agg_result=d.aggregate([{"$match" : {"$and" :[{"cuisine" : {"$ne" :"American "}},{"grades.score" :
           {"$gt" : 70}},{"address.coord" : {"$lt" : -65.754168}}]}}])

==================================================================================

12.Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than
 70 and located in the longitude less than -65.754168. Note : Do this query without using $and operator.

db.restaurants.find({"cuisine":{$ne :"American "},"grades.score":{$gt : 70},"address.coord.1":{$lt :-65.754168}});

 agg_result=d.db.restaurants.find({"cuisine":{"$ne" :"American "},"grades.score":{"$gt" : 70},
      "address.coord.1":{"$lt" :-65.754168}})
      for e in agg_result: 
           print(e)

===========================================================================

13.Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 
'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

A.db.restaurants.find( {
                             "cuisine" : {$ne : "American "},
                             "grades.grade" :"A",
                             "borough": {$ne : "Brooklyn"}
                       } 
                    ).sort({"cuisine":-1});

agg_result=d.find( {
                               "cuisine" : {"$ne" : "American "},
                               "grades.grade" :"A",
                               "borough": {"$ne" : "Brooklyn"}
      } 
      ).sort("cuisine",1)
      for e in agg_result: 
           print(e)

===========================================================================

14.Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first
 three letters for its name.

db.restaurants.find(
{name: /^Wil/},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

agg_result=d.find(
  {"name": re.compile('^Wil')},
  {
  "restaurant_id" : 1,
  "name":1,"borough":1,
  "cuisine" :1
  }
  )
      for e in agg_result: 
          pprint.pprint(e)

=============================================================================

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last 
three letters for its name.

db.restaurants.find({'name':{$regex :/ces$/}},{'restaurant_id':1, 'name':1, 'borough':1 ,'cuisine':1});

==============================================================================

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three
 letters somewhere in its name.

 db.restaurants.find({'name':{$regex :/.*Reg.*/}},{'restaurant_id':1, 'name':1, 'borough':1 ,'cuisine':1});

===========================================================================

17. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as
 three letters somewhere in its name.

A.db.restaurants.find({'borough':'Bronx',$or : [{'cuisine' : 'American '},{'cuisine' : 'Chinese'}]});

==================================================================================

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough
 Staten Island or Queens or Bronxor Brooklyn.

db.restaurants.find({'borough' :{$in : ['Staten Island','Queens','Bronx','Brooklyn']}},{'restaurant_id' : 1, 'name' : 1, 'borough' : 1,'cuisine' : 1});

======================================================================================

19.Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to
 the borough Staten Island or Queens or Bronxor Brooklyn.

db.restaurants.find({'borough' :{$nin : ['Staten Island','Queens','Bronx','Brooklyn']}},{'restaurant_id' : 1, 'name' : 1, 'borough' : 1,'cuisine' : 1});

=======================================================================

20.Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which
 is not more than 10.

A. db.restaurants.find({'grades.score' :{$lt : 10}},{'restaurant_id' : 1, 'name' : 1, 'borough' : 1,'cuisine' : 1});

=======================================================================================

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 
'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.

A. db.restaurants.find({$or: [{ 'cuisine' : {$nin : ['American ','Chineese']}},{'name' : {$regex : /^Wel/}}]},{'restaurant_id' : 1, 'name' : 1, 'borough' : 1,'cuisine' : 1});

================================================================================

22.Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and 
scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates.

A. db.restaurants.find({
... 'grades.grade' : 'A',
... 'grades.score' : 11,
... 'grades.date' : ISODate('2014-08-11T00:00:00Z'),
... },
... {
... 'restaurant_id' : 1,
... 'name' : 1,
... 'grades' : 1
... }
... )

============================================================================

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades 
array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".
A.db.restaurants.find({
... 'grades.1.grade' : 'A',
... 'grades.1.score' : 9,
... 'grades.1.date' : ISODate('2014-08-11T00:00:00Z'),
... },
... {
... 'restaurant_id' : 1,
... 'name' : 1,
... 'grades' : 1
... }
... )

======================================================================

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd
 element of coord array contains a value which is more than 42 and upto 52.

A. db.restaurants.find({'address.coord.1':{$gt : 42,$lt :52}},{ 'restaurant_id' : 1, 'name' : 1, 'address' : 1, 'coord' : 1, })

================================================================================

25.Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.

A.db.restaurants.find().sort({'name' : 1}).pretty()

==========================================================================

26.Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.

A.db.restaurants.find().sort({'name' : -1}).pretty();

==================================================================================

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be
 in descending order.

A.db.restaurants.find().sort({'cuisine' : 1},{'borough' : -1}).pretty();

=================================================================

28. Write a MongoDB query to know whether all the addresses contains the street or not.

A. db.restaurants.find( {'address.street' : {$exists : 1}} ).pretty()

=================================================================================

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.

A. db.restaurants.find({"address.coord": {$type : 1}}).pretty()

==============================================================================

30.Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder
 after dividing the score by 7.

A.  db.restaurants.find({"grades.score" : {$mod : [7,0]}},{"restaurant_id" : 1, "name" : 1, "grades" : 1}).pretty()

===============================================================================

31.Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which
 contains 'mon' as three letters somewhere in its name.

A. db.restaurants.find({"name" : {$regex : /mon.*/}},{"name" : 1, "borough" : 1, "address.coord" : 1 , "cuisine" : 1}).pretty();

===============================================================================

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which
 contain 'Mad' as first three letters of its name.

A. db.restaurants.find({"name" : {$regex : /^Mad.*/i}},{"name" : 1, "borough" : 1, "address.coord" : 1 , "cuisine" : 1}).pretty();

-----------------------------------------------------0000000000000000000--------------------------------------------------------





